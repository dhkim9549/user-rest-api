package com.example.accessingdatamysql;

import java.util.Optional;
import java.util.HashMap;
import java.util.Date;
import java.util.Collection;
import java.time.LocalDateTime;
import org.jasypt.exceptions.EncryptionOperationNotPossibleException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.transaction.annotation.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Controller     // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /user (after Application path)
public class UserController {
        @Autowired // This means to get the bean called tbUserRepository
                           // Which is auto-generated by Spring, we will use it to handle the data
        private TbUserRepository tbUserRepository;
	@Autowired
	private TbResvDyRepository tbResvDyRepository;

	private static final Logger logger = LoggerFactory.getLogger(UserController.class);

	@GetMapping(path="/del")
        @Transactional
        public @ResponseBody HashMap delUser(@RequestParam String tkn) throws Exception {

                logger.info("delUser() start..");

                HashMap rsltMap = new HashMap();

                if(!validate(tkn)) {
                        rsltMap.put("rslt", "invalid-tkn");
                        return rsltMap;
                }

                HashMap map = JasyptUtil.decTkn(tkn);

                TbUser u = tbUserRepository.findById((String)map.get("mbno")).orElse(null);
                if(u == null) {
                        rsltMap.put("rslt", "not-reserved");
                        return rsltMap;
                }

		tbResvDyRepository.updateResvDyNative(u.getResvDy(), -1);

                tbUserRepository.deleteById((String)map.get("mbno"));

		rsltMap.put("rslt", "deleted");

		return rsltMap;
	}


        @GetMapping(path="/add")
	@Transactional
        public @ResponseBody HashMap addUser(@RequestParam String tkn, @RequestParam String resvDy) throws Exception {
                // @ResponseBody means the returned String is the response, not a view
                // @RequestParam means it is a parameter from the GET or POST request

		logger.info("addUser() start..");

		HashMap rsltMap = new HashMap();

                if(!validate(tkn)) {
			rsltMap.put("rslt", "invalid-tkn");
                        return rsltMap; 
                }

		HashMap map = JasyptUtil.decTkn(tkn);

		TbUser u = tbUserRepository.findById((String)map.get("mbno")).orElse(null);
                if(u != null) {
                        rsltMap.put("rslt", "pre-reserved");
                        return rsltMap;
                }

		TbResvDy r =  tbResvDyRepository.findById(resvDy).orElse(null);

		if(r == null) {
			rsltMap.put("rslt", "invalid-resvDy");
                        return rsltMap;
		} else if(r.getResvCnt() >= r.getAllCnt()) {
			rsltMap.put("rslt", "closed");
			return rsltMap;
		}
		
                TbUser n = new TbUser();
                n.setMbno((String)map.get("mbno"));
		n.setName((String)map.get("name"));
		n.setLocalDateTime(LocalDateTime.now());
                n.setResvDy(resvDy);
                tbUserRepository.save(n);

		tbResvDyRepository.updateResvDyNative(resvDy, 1);

		rsltMap.put("rslt", "saved");

                return rsltMap;
        }

        @GetMapping(path="/all")
        public @ResponseBody Iterable<TbUser> getAllUser() {
                // This returns a JSON or XML with the users
                return tbUserRepository.findAll();
        }

	@GetMapping(path="/get")
	public @ResponseBody HashMap getUser(@RequestParam String tkn) {

		logger.info("getUser() start..");

		HashMap rsltMap = new HashMap();

		if(!validate(tkn)) {
			rsltMap.put("rslt", "invalid-tkn");
			return rsltMap;
		}

		HashMap map = JasyptUtil.decTkn(tkn);
		TbUser u = tbUserRepository.findById((String)map.get("mbno")).orElse(null);
		rsltMap.put("resvDy", "");
		if(u != null) {
			rsltMap.put("resvDy", u.getResvDy());
		}

		return rsltMap;	
	}

	public static boolean validate(String tkn) {
		boolean rslt = false;
		try {
	                HashMap map = JasyptUtil.decTkn(tkn);
        	        String mbno = (String)map.get("mbno");
                	if(mbno != null && mbno.length() >= 10) {
                        	rslt = true;
	                }	
			long time = Long.parseLong((String)map.get("time"));
			Date date = new Date();
			if(date.getTime() - time > 1000 * 60 * 10 * 6 * 240) {
				rslt = false;
			}
		} catch(EncryptionOperationNotPossibleException e) {
		}
                return rslt;
	}

        @GetMapping(path="/val")
        public @ResponseBody String validateTkn(@RequestParam String tkn) throws Exception {
		String rslt = "";
		if(validate(tkn)) {
			rslt = "good";
		} else {
			rslt = "bad";
		}
		return rslt;
	}
}

